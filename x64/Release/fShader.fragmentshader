#version 330 core

// Interpolated values from the vertex shaders
in vec3 fragmentColor;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

void main(){
	// Light emission properties
	vec3 LightColor = vec3(0.5,0.5,0.5);
	float LightPower = 20.0f;

	// Material properties
	vec3 MaterialDiffuseColor = vec3(0.5,0.5,0.5);
	vec3 MaterialAmbientColor = vec3(0.8,0.8,0.8);
	vec3 MaterialSpecularColor = vec3(0.05,0.05,0.05);

	// Global ambient light:
	vec3 global_amb = vec3(0.1, 0.1, 0.1); // a weak white light

	// Ambient
	vec3 ambient = MaterialAmbientColor * LightColor;

	// Distance to the light
	// Use for simple light source attenuation
	float distance = length(LightPosition_worldspace - Position_worldspace);

	// Normal vector at point (normalized)
	vec3 n = normalize( Normal_cameraspace );
	// Light source vector (normalized)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot(n,l), 0,1 );

	// Diffuse : kd * Ld * (n.l) * att
	vec3 diffuse = MaterialDiffuseColor * (LightColor * LightPower) * cosTheta / (distance*distance);

	// Eye vector (towards the camera)
	vec3 v = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 r = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot(v,r), 0,1 );

	// Specular : ks * Ls * (v.r)^n * att
	vec3 specular = MaterialSpecularColor * (LightColor) * pow(cosAlpha,130) / (distance*distance);
	
	color = global_amb + ambient + diffuse + specular;
}